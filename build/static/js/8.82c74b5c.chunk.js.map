{"version":3,"sources":["components/HistoryGraph.tsx"],"names":["useStyles","makeStyles","theme","ExchangeHistoryGraph","borderRadius","padding","margin","width","minHeight","HistoryGraph","history","classes","useEffect","color","primary","am4core","secondary","am4themes_dark","am4themes_animated","autoDispose","chart","am4charts","marginLeft","drawerWidth","marginRight","data","dateFormatter","inputDateFormat","dateAxis","xAxes","push","valueAxis","yAxes","series","customizeGrip","grip","background","fill","fillOpacity","scrollbarConstructor","scrollbar","startGrip","endGrip","icon","stroke","dataFields","valueY","dateX","tooltipText","propertyFields","skipEmptyPeriods","renderer","minGridDistance","grid","template","location","strokeWidth","minBulletDistance","tooltip","cornerRadius","strokeOpacity","pointerOrientation","label","minWidth","textAlign","scrollbarY","parent","leftAxesContainer","toBack","scrollbarX","bottomAxesContainer","dateAxisTooltip","cursorTooltipEnabled","cursor","keepSelection","dispose","id","className"],"mappings":"gIACA,iFAcMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,qBAAsB,CACpBC,aAAc,GACdC,QAAS,GACTC,OAAO,OACPC,MAAO,MAAOC,UAAW,SAwHZC,UArHb,YACa,IAAXC,EAAU,EAAVA,QACQC,EAAUX,IA8GlB,OA3GEY,qBAAU,WACV,IAAMC,EAAQ,CACZC,QAASC,IAAc,WACvBC,UAAWD,IAAc,YAE3BA,IAAiBE,KACjBF,IAAiBG,KACjBH,IAAgBI,aAAc,EAE9B,IAAIC,EAAQL,IAAe,WAAYM,KACrCD,EAAME,WAAaC,IACnBH,EAAMI,YAAcD,IAsBtBH,EAAMK,KAAOf,EACbU,EAAMM,cAAcC,gBAAkB,aACtC,IAAIC,EAAWR,EAAMS,MAAMC,KAAK,IAAIT,KAChCU,EAAYX,EAAMY,MAAMF,KAAK,IAAIT,KACjCY,EAASb,EAAMa,OAAOH,KAAK,IAAIT,KA2CnC,SAASa,EAAcC,GACrBA,EAAKC,WAAWC,KAAOxB,EAAMG,UAC7BmB,EAAKC,WAAWE,YAAc,GAEhC,SAASC,EAAqBC,GAC5BN,EAAcM,EAAUC,WACxBP,EAAcM,EAAUE,SACxBF,EAAUJ,WAAWC,KAAOxB,EAAMC,QAClC0B,EAAUE,QAAQC,KAAKC,OAAS/B,EAAMC,QACtC0B,EAAUC,UAAUE,KAAKC,OAAS/B,EAAMC,QAnD1CmB,EAAOY,WAAWC,OAAS,QAC3Bb,EAAOY,WAAWE,MAAQ,OAC1Bd,EAAOe,YAAc,UACrBf,EAAOW,OAAS/B,EAAMC,QACtBmB,EAAOgB,eAAeL,OAAS,QAE/BhB,EAASsB,kBAAmB,EAC5BtB,EAASuB,SAASC,gBAAkB,GACpCxB,EAASuB,SAASE,KAAKC,SAASC,SAAW,EAE3CtB,EAAOuB,YAAc,EAErBvB,EAAOI,KAAOJ,EAAOW,OACrBX,EAAOK,YAAc,GACrBL,EAAOwB,kBAAoB,GAGvBxB,EAAOyB,UACXzB,EAAOyB,QAAQtB,WAAWuB,aAAe,GACzC1B,EAAOyB,QAAQtB,WAAWwB,cAAgB,GAC1C3B,EAAOyB,QAAQG,mBAAqB,WACpC5B,EAAOyB,QAAQI,MAAMzD,QAAQ,GAAG,GAAG,GAAG,IACtC4B,EAAOyB,QAAQI,MAAMC,SAAW,GAChC9B,EAAOyB,QAAQI,MAAMtD,UAAY,GACjCyB,EAAOyB,QAAQI,MAAME,UAAY,UAGjC5C,EAAM6C,WAAa,IAAIlD,IACvBK,EAAM6C,WAAWC,OAAS9C,EAAM+C,kBAChC/C,EAAM6C,WAAWG,SAGjBhD,EAAMiD,WAAa,IAAIhD,IAKvBD,EAAMiD,WAAWH,OAAS9C,EAAMkD,oBAgBhC/B,EAAqBnB,EAAM6C,YAC3B1B,EAAqBnB,EAAMiD,YAE3B,IAAIE,EAAkB3C,EAAS8B,QAQ/B,OAPA3B,EAAUyC,sBAAuB,EACjCpD,EAAMqD,OAAS,IAAIpD,IAEnBO,EAAS8C,eAAgB,EACrBH,IACFA,EAAgBnC,WAAWC,KAAOxB,EAAMC,SAEnC,WACLM,EAAMuD,aAEL,CAACjE,IAGJ,kBAAC,IAAD,CAAakE,GAAG,WAAWC,UAAWlE,EAAQR","file":"static/js/8.82c74b5c.chunk.js","sourcesContent":["\nimport React, {  useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport {  IDataItem } from './types'\n\n\nimport { CardContent } from '@material-ui/core';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_dark from \"@amcharts/amcharts4/themes/dark\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nconst drawerWidth = 290;\nconst drawerClosed = 130;\n\nconst useStyles = makeStyles((theme) => ({\n  ExchangeHistoryGraph: {\n    borderRadius: 12,\n    padding: 30,\n    margin:'auto',\n    width: \"95%\", minHeight: 730},\n  }));\n\n    function HistoryGraph({  \n      history}) {\n        const classes = useStyles();\n\n        /* useLayoutEffect */\n        useEffect(() => {\n        const color = { \n          primary: am4core.color('#8CFFDA'),\n          secondary: am4core.color('#e385bb')\n        }\n        am4core.useTheme(am4themes_dark);\n        am4core.useTheme(am4themes_animated)  ;\n        am4core.options.autoDispose = true;\n      \n        let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n          chart.marginLeft = drawerWidth -10\n          chart.marginRight = drawerWidth -40\n      /*   let data: Array<IDataItem> = [];\n        let value, date;\n        let previousValue = 0;\n      // used to build a color difference for increase or\n      // decrease in previous value \n        for (let i = 0; i < history.length; i++) {\n          value = history[i]['value'];\n          date = history[i]['date'];\n          //change the color of previous value\n          if(i > 0){\n            data[i - 1].color = previousValue <= value ?\n              color.primary :\n              color.secondary\n          }     \n          data.push({ \n            date: date, \n            value: value });\n          previousValue = value;\n      } \n      chart.data = data;\n       */\n        chart.data = history;\n        chart.dateFormatter.inputDateFormat = \"yyyy-MM-dd\";\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n        let series = chart.series.push(new am4charts.LineSeries());\n        series.dataFields.valueY = \"value\";\n        series.dataFields.dateX = \"date\";\n        series.tooltipText = \"{value}\";\n        series.stroke = color.primary;\n        series.propertyFields.stroke = \"color\";\n      \n        dateAxis.skipEmptyPeriods = true;\n        dateAxis.renderer.minGridDistance = 45;\n        dateAxis.renderer.grid.template.location = 0;\n      \n        series.strokeWidth = 3;\n        // series.tensionX = 0.8; // can't keep this with changing color of line depending on delta being +/- as its a new line after every change\n        series.fill = series.stroke;\n        series.fillOpacity = 0.2;\n        series.minBulletDistance = 15;\n      \n        // Drop-shaped tooltips\n        if (series.tooltip) {\n        series.tooltip.background.cornerRadius = 20;\n        series.tooltip.background.strokeOpacity = 0.5;\n        series.tooltip.pointerOrientation = \"vertical\";\n        series.tooltip.label.padding(12,12,12,12)\n        series.tooltip.label.minWidth = 40;\n        series.tooltip.label.minHeight = 40;\n        series.tooltip.label.textAlign = \"middle\";\n        }\n        // Create vertical scrollbar and place it before the value axis\n        chart.scrollbarY = new am4core.Scrollbar();\n        chart.scrollbarY.parent = chart.leftAxesContainer;\n        chart.scrollbarY.toBack();\n      \n        // Create a horizontal scrollbar with preview and place it underneath the date axis\n        chart.scrollbarX = new am4charts.XYChartScrollbar();\n      \n      \n        //need to fix the series on this with typescript yelling\n        //chart.scrollbarX.series.push(series);\n        chart.scrollbarX.parent = chart.bottomAxesContainer;\n        /* \n          need to fix this typing later on, shoulnt have any\n          */\n        //styling for the scroll bar\n        function customizeGrip(grip: any) {\n          grip.background.fill = color.secondary;\n          grip.background.fillOpacity = 0.9;}\n      \n        function scrollbarConstructor(scrollbar: any) {\n          customizeGrip(scrollbar.startGrip);\n          customizeGrip(scrollbar.endGrip);\n          scrollbar.background.fill = color.primary;\n          scrollbar.endGrip.icon.stroke = color.primary;\n          scrollbar.startGrip.icon.stroke = color.primary;}\n      \n        scrollbarConstructor(chart.scrollbarY)\n        scrollbarConstructor(chart.scrollbarX)\n        \n        let dateAxisTooltip = dateAxis.tooltip;\n        valueAxis.cursorTooltipEnabled = false;\n        chart.cursor = new am4charts.XYCursor();\n      \n        dateAxis.keepSelection = true;\n        if (dateAxisTooltip) {\n          dateAxisTooltip.background.fill = color.primary;}\n      \n        return () => {\n          chart.dispose();\n          };\n        }, [history]);\n\n      return (\n        <CardContent id=\"chartdiv\" className={classes.ExchangeHistoryGraph} />\n      );\n    }\n\n  export default HistoryGraph "],"sourceRoot":""}