{"ast":null,"code":"import { useEffect, useReducer } from \"react\";\nimport axios from 'axios'; //const SET_APP_DATA = \"SET_APP_DATA\";\n\nconst SET_CURRENCY_LIST = \"SET_CURRENCY_LIST\";\nconst SET_FROM_CURRENCY = \"SET_FROM_CURRENCY\";\nconst SET_TO_CURRENCY = \"SET_TO_CURRENCY\";\nconst SET_RESULT = \"SET_RESULT\";\nconst getCurrencies = axios.get(\"https://api.exchangeratesapi.io/latest?base=CAD\");\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_CURRENCY_LIST\":\n      return { ...state,\n        currenciesList: action.currenciesList\n      };\n\n    case \"SET_FROM_CURRENCY\":\n      return { ...state,\n        fromCurrency: action.currency\n      };\n\n    case \"SET_TO_CURRENCY\":\n      return { ...state,\n        toCurrency: action.currency\n      };\n\n    case \"SET_RESULT\":\n      return { ...state,\n        result: action.result\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport default function useAppData() {\n  const [state, dispatch] = useReducer(reducer, {\n    result: null,\n    fromCurrency: \"CAD\",\n    toCurrency: \"USD\",\n    amount: 1,\n    currenciesList: []\n  });\n  useEffect(() => {\n    getCurrencies.then(res => {\n      const currenciesList = []; //setting up avb currencies to choose from\n\n      for (const key in res.data.rates) {\n        currenciesList.push(key);\n      }\n\n      dispatch({\n        type: SET_CURRENCY_LIST,\n        currenciesList: currenciesList\n      });\n    }).catch(err => {\n      console.log(\"Something went wrong\", err);\n    });\n  }, []); // Empty array to only run once on mount.\n\n  const setFromCurrency = currency => {\n    dispatch({\n      type: SET_FROM_CURRENCY,\n      currency\n    });\n  };\n\n  const setToCurrency = currency => {\n    dispatch({\n      type: SET_TO_CURRENCY,\n      currency\n    });\n  };\n\n  const setResult = result => {\n    dispatch({\n      type: SET_RESULT,\n      result\n    });\n  };\n\n  const convertHandler = () => {\n    if (state.fromCurrency !== state.toCurrency) {\n      axios.get(`https://api.openrates.io/latest?base=${state.fromCurrency}&symbols=${state.toCurrency}`).then(res => {\n        const result = state.amount * res.data.rates[state.toCurrency];\n        setResult(result.toFixed(5));\n      }).catch(error => {\n        console.log(\"Opps\", error.message);\n      });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n\n  const selectHandler = e => {\n    if (e.target.name === \"from\") {\n      setFromCurrency(e.target.value);\n    } else if (e.target.name === \"to\") {\n      setToCurrency(e.target.value);\n    }\n  };\n\n  return {\n    state,\n    convertHandler,\n    selectHandler\n  };\n}","map":{"version":3,"sources":["/home/ody7/lighthouse/repos/currency_converters/currency_converter_v1/src/hooks/useAppData.js"],"names":["useEffect","useReducer","axios","SET_CURRENCY_LIST","SET_FROM_CURRENCY","SET_TO_CURRENCY","SET_RESULT","getCurrencies","get","reducer","state","action","type","currenciesList","fromCurrency","currency","toCurrency","result","Error","useAppData","dispatch","amount","then","res","key","data","rates","push","catch","err","console","log","setFromCurrency","setToCurrency","setResult","convertHandler","toFixed","error","message","selectHandler","e","target","name","value"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport axios from 'axios';\n\n//const SET_APP_DATA = \"SET_APP_DATA\";\nconst SET_CURRENCY_LIST = \"SET_CURRENCY_LIST\";\nconst SET_FROM_CURRENCY = \"SET_FROM_CURRENCY\";\nconst SET_TO_CURRENCY = \"SET_TO_CURRENCY\";\nconst SET_RESULT = \"SET_RESULT\";\n\nconst getCurrencies = axios.get(\"https://api.exchangeratesapi.io/latest?base=CAD\")\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case \"SET_CURRENCY_LIST\":\n      return {...state, currenciesList: action.currenciesList}\n    case \"SET_FROM_CURRENCY\":\n      return {...state, fromCurrency: action.currency}\n    case \"SET_TO_CURRENCY\":\n      return {...state, toCurrency: action.currency}\n    case \"SET_RESULT\":\n      return {...state, result: action.result}\n    default:\n      throw new Error();\n  }\n}\nexport default function useAppData() {\n\n  const [state, dispatch] = useReducer(reducer, {\n    result: null,\n    fromCurrency: \"CAD\",\n    toCurrency: \"USD\",\n    amount: 1,\n    currenciesList: []\n  })\n\n  useEffect(() => {\n    getCurrencies\n      .then(res => {\n        const currenciesList = [];\n        //setting up avb currencies to choose from\n        for (const key in res.data.rates) {\n          currenciesList.push(key);\n        }\n        dispatch({\n          type: SET_CURRENCY_LIST,\n          currenciesList: currenciesList\n        });\n      })\n      .catch(err => {\n        console.log(\"Something went wrong\", err);\n      });\n  }, []); // Empty array to only run once on mount.\n\n  const setFromCurrency = (currency) => {dispatch({type:SET_FROM_CURRENCY, currency})};\n  const setToCurrency = (currency) => {dispatch({type:SET_TO_CURRENCY, currency})};\n  const setResult = (result) => {dispatch({type:SET_RESULT, result})};\n\n  const convertHandler = () => {\n    if (state.fromCurrency !== state.toCurrency) {  \n      axios\n        .get(\n          `https://api.openrates.io/latest?base=${\n            state.fromCurrency}&symbols=${state.toCurrency}`\n        )\n        .then(res => {\n          const result = \n          state.amount * res.data.rates[state.toCurrency];\n          setResult(result.toFixed(5));\n        })\n        .catch(error => {\n          console.log(\"Opps\", error.message);\n        });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n\n  const selectHandler = e => {\n    if (e.target.name === \"from\") {  \n      setFromCurrency(e.target.value) \n    } else if (e.target.name === \"to\") {\n        setToCurrency(e.target.value)\n      }\n  }\n\n  return {\n    state,\n    convertHandler,\n    selectHandler\n  }\n}"]},"metadata":{},"sourceType":"module"}