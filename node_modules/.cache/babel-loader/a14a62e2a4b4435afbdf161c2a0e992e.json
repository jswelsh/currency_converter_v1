{"ast":null,"code":"import { useEffect, useReducer } from \"react\";\nimport axios from 'axios'; //const SET_APP_DATA = \"SET_APP_DATA\";\n\nconst SET_CURRENCY_LIST = \"SET_CURRENCY_LIST\";\nconst SET_FROM_CURRENCY = \"SET_FROM_CURRENCY\";\nconst SET_TO_CURRENCY = \"SET_TO_CURRENCY\";\nconst SET_RESULT = \"SET_RESULT\";\nconst SET_HISTORY = \"SET_HISTORY\";\nconst getCurrencies = axios.get(\"https://api.exchangeratesapi.io/latest\");\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_CURRENCY_LIST\":\n      return { ...state,\n        currenciesList: action.currenciesList\n      };\n\n    case \"SET_FROM_CURRENCY\":\n      return { ...state,\n        fromCurrency: action.currency\n      };\n\n    case \"SET_TO_CURRENCY\":\n      return { ...state,\n        toCurrency: action.currency\n      };\n\n    case \"SET_RESULT\":\n      return { ...state,\n        result: action.result\n      };\n\n    case \"SET_HISTORY\":\n      return { ...state,\n        history: action.history\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport default function useAppData() {\n  const [state, dispatch] = useReducer(reducer, {\n    result: null,\n    fromCurrency: \"CAD\",\n    toCurrency: \"USD\",\n    amount: 1,\n    currenciesList: [],\n    history: []\n  });\n  useEffect(() => {\n    getCurrencies.then(res => {\n      const currenciesList = []; //setting up avb currencies to choose from\n\n      for (const key in res.data.rates) {\n        currenciesList.push(key);\n      }\n\n      console.log(res);\n      dispatch({\n        type: SET_CURRENCY_LIST,\n        currenciesList: currenciesList\n      });\n    }).catch(err => {\n      console.log(\"Something went wrong\", err);\n    });\n  }, []); // Empty array to only run once on mount.\n\n  const setFromCurrency = currency => {\n    dispatch({\n      type: SET_FROM_CURRENCY,\n      currency\n    });\n  };\n\n  const setToCurrency = currency => {\n    dispatch({\n      type: SET_TO_CURRENCY,\n      currency\n    });\n  };\n\n  const setResult = result => {\n    dispatch({\n      type: SET_RESULT,\n      result\n    });\n  };\n\n  const setHistory = history => {\n    dispatch({\n      type: SET_HISTORY,\n      history\n    });\n  };\n\n  const convertHandler = () => {\n    const latestURL = \"https://api.openrates.io/latest?\";\n\n    if (state.fromCurrency !== state.toCurrency) {\n      axios.get(`${latestURL}base=${state.fromCurrency}&symbols=${state.toCurrency}`).then(res => {\n        const result = state.amount * res.data.rates[state.toCurrency];\n        setResult(result.toFixed(5));\n        console.log(\"basic\");\n      }).catch(error => {\n        console.log(\"Opps\", error.message);\n      });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n\n  const convertHistoryHandler = e => {\n    console.log;\n    const historicalURL = \"https://api.exchangeratesapi.io/history?start_at=2020-09-01&end_at=2020-09-17&\";\n\n    if (state.fromCurrency !== state.toCurrency) {\n      //maybe not return\n      axios.get(`${historicalURL}base=${state.fromCurrency}&symbols=${state.toCurrency}`).then(res => {\n        let historyController = (currency, historyObj) => {\n          console.log('historical');\n          let history = [];\n\n          for (const [key, value] of Object.entries(historyObj)) {\n            history.push({\n              \"date\": new Date(key),\n              \"value\": value[state.toCurrency]\n            });\n          }\n\n          return history;\n        };\n\n        let history = historyController(state.toCurrency, res.data.rates);\n        console.log(history, \"history1\");\n        setHistory(history);\n      }).catch(error => {\n        console.log(\"Opps\", error.message);\n      });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n\n  const selectHandler = e => {\n    if (e.target.name === \"from\") {\n      setFromCurrency(e.target.value);\n    } else if (e.target.name === \"to\") {\n      setToCurrency(e.target.value);\n    }\n  };\n\n  return {\n    state,\n    convertHandler,\n    convertHistoryHandler,\n    selectHandler\n  };\n}","map":{"version":3,"sources":["/home/ody7/lighthouse/repos/currency_converters/currency_converter_v1/src/hooks/useAppData.js"],"names":["useEffect","useReducer","axios","SET_CURRENCY_LIST","SET_FROM_CURRENCY","SET_TO_CURRENCY","SET_RESULT","SET_HISTORY","getCurrencies","get","reducer","state","action","type","currenciesList","fromCurrency","currency","toCurrency","result","history","Error","useAppData","dispatch","amount","then","res","key","data","rates","push","console","log","catch","err","setFromCurrency","setToCurrency","setResult","setHistory","convertHandler","latestURL","toFixed","error","message","convertHistoryHandler","e","historicalURL","historyController","historyObj","value","Object","entries","Date","selectHandler","target","name"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport axios from 'axios';\n\n//const SET_APP_DATA = \"SET_APP_DATA\";\nconst SET_CURRENCY_LIST = \"SET_CURRENCY_LIST\";\nconst SET_FROM_CURRENCY = \"SET_FROM_CURRENCY\";\nconst SET_TO_CURRENCY = \"SET_TO_CURRENCY\";\nconst SET_RESULT = \"SET_RESULT\";\nconst SET_HISTORY = \"SET_HISTORY\";\n\nconst getCurrencies = axios.get(\"https://api.exchangeratesapi.io/latest\")\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case \"SET_CURRENCY_LIST\":\n      return {...state, currenciesList: action.currenciesList}\n    case \"SET_FROM_CURRENCY\":\n      return {...state, fromCurrency: action.currency}\n    case \"SET_TO_CURRENCY\":\n      return {...state, toCurrency: action.currency}\n    case \"SET_RESULT\":\n      return {...state, result: action.result}\n    case \"SET_HISTORY\":\n      return {...state, history: action.history}\n    default:\n      throw new Error();\n  }\n}\nexport default function useAppData() {\n\n  const [state, dispatch] = useReducer(reducer, {\n    result: null,\n    fromCurrency: \"CAD\",\n    toCurrency: \"USD\",\n    amount: 1,\n    currenciesList: [],\n    history: []\n  })\n\n  useEffect(() => {\n    getCurrencies\n      .then(res => {\n        const currenciesList = [];\n        //setting up avb currencies to choose from\n        for (const key in res.data.rates) {\n          currenciesList.push(key);\n        }\n        console.log(res)\n        dispatch({\n          type: SET_CURRENCY_LIST,\n          currenciesList: currenciesList\n        });\n      })\n      .catch(err => {\n        console.log(\"Something went wrong\", err);\n      });\n  }, []); // Empty array to only run once on mount.\n\n  const setFromCurrency = (currency) => {dispatch({type:SET_FROM_CURRENCY, currency})};\n  const setToCurrency = (currency) => {dispatch({type:SET_TO_CURRENCY, currency})};\n  const setResult = (result) => {dispatch({type:SET_RESULT, result})};\n  const setHistory = (history) => {dispatch({type:SET_HISTORY, history})};\n\n  const convertHandler = () => {\n    const latestURL = \"https://api.openrates.io/latest?\"\n\n    if (state.fromCurrency !== state.toCurrency) {  \n      axios\n        .get(\n          `${latestURL}base=${state.fromCurrency}&symbols=${state.toCurrency}`\n        )\n        .then(res => {\n          const result = \n            state.amount * res.data.rates[state.toCurrency];\n            setResult(result.toFixed(5));\n            console.log(\"basic\")\n        })\n        .catch(error => {\n          console.log(\"Opps\", error.message);\n        });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n  \n  const convertHistoryHandler = (e) => {\n    console.log\n    const historicalURL = \"https://api.exchangeratesapi.io/history?start_at=2020-09-01&end_at=2020-09-17&\";\n\n    if (state.fromCurrency !== state.toCurrency) {  \n\n      //maybe not return\n\n      axios\n        .get(\n          `${historicalURL}base=${state.fromCurrency}&symbols=${state.toCurrency}`\n        )\n        .then(res => {\n          let historyController = (currency, historyObj) => {\n            console.log('historical')\n            let history = []\n            for (const [key, value] of Object.entries(historyObj)) { history.push({\"date\" : new Date(key), \"value\" : value[state.toCurrency]})}\n            return history\n          }\n          let history = historyController(state.toCurrency, res.data.rates);\n          console.log(history, \"history1\")\n          setHistory(history)\n        })\n        .catch(error => {\n          console.log(\"Opps\", error.message);\n        });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n\n  const selectHandler = e => {\n    if (e.target.name === \"from\") {  \n      setFromCurrency(e.target.value) \n    } else if (e.target.name === \"to\") {\n        setToCurrency(e.target.value)\n      }\n  }\n\n  return {\n    state,\n    convertHandler,\n    convertHistoryHandler,\n    selectHandler\n  }\n}"]},"metadata":{},"sourceType":"module"}