{"ast":null,"code":"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./converter.css\";\n/* class Converter extends React.Component {} */\n\nfunction Converter() {\n  const [result, setResult] = useState(null);\n  const [fromCurrency, setFromCurrency] = useState(\"USD\");\n  const [toCurrency, setToCurrency] = useState(\"GBP\");\n  const [amount, setAmount] = useState(1);\n  const [currencies, setCurrencies] = useState([]);\n  /*   \n  constructor(props) {\n    super(props); //need to update this as its depreciated\n    this.state = {\n      result: null,\n      fromCurrency: \"USD\",\n      toCurrency: \"GBP\",\n      amount: 1,\n      currencies: []\n    };\n  } */\n\n  React.useEffect(() => {\n    console.log('Mounted');\n    axios.get(\"https://api.openrates.io/latest\").then(response => {\n      const currencyArr = [\"EUR\"]; //setting up avb currencies to choose from\n\n      for (const key in response.data.rates) {\n        currencyArr.push(key);\n      }\n\n      setCurrencies(currencyArr);\n    }).catch(err => {\n      console.log(\"Something went wrong\", err);\n    });\n  }, []); // Empty array means to only run once on mount.\n\n  /*   \n  componentDidMount() {\n    axios\n      .get(\"https://api.openrates.io/latest\")\n      .then(response => {\n        const currencyArr = [\"EUR\"];\n        //setting up avb currencies to choose from\n        for (const key in response.data.rates) {\n          currencyArr.push(key);\n        }\n        this.setState({currencies: currencyArr});\n      })\n      .catch(err => {\n        console.log(\"Something went wrong\", err);\n      });\n  }; */\n\n  convertHandler = () => {\n    if (fromCurrency !== toCurrency) {\n      axios.get(`https://api.openrates.io/latest?base=${fromCurrency}&symbols=${toCurrency}`).then(response => {\n        const result = amount * response.data.rates[toCurrency];\n        setResult(result.toFixed(5));\n      }).catch(error => {\n        console.log(\"Opps\", error.message);\n      });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n  /*   \n  convertHandler = () => {\n    if (this.state.fromCurrency !== this.state.toCurrency) {  \n      axios\n        .get(\n          `https://api.openrates.io/latest?base=${\n            this.state.fromCurrency\n          }&symbols=${this.state.toCurrency}`\n        )\n        .then(response => {\n          const result =\n            this.state.amount * response.data.rates[this.state.toCurrency];\n          this.setState({ result: result.toFixed(5) });\n        })\n        .catch(error => {\n          console.log(\"Opps\", error.message);\n        });\n    } else {\n      this.setState({ result: \"You cant convert the same currency!\" });\n    }\n  }; */\n\n}\n\nexport default Converter;","map":{"version":3,"sources":["/home/ody7/lighthouse/repos/currency_converters/currency_converter_v1/src/component/converter/converter.js"],"names":["React","useState","axios","Converter","result","setResult","fromCurrency","setFromCurrency","toCurrency","setToCurrency","amount","setAmount","currencies","setCurrencies","useEffect","console","log","get","then","response","currencyArr","key","data","rates","push","catch","err","convertHandler","toFixed","error","message"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AAEA;;AACA,SAASC,SAAT,GAAqB;AAEnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA;;;;;;;;;;;;AAYAD,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAd,IAAAA,KAAK,CACFe,GADH,CACO,iCADP,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMC,WAAW,GAAG,CAAC,KAAD,CAApB,CADgB,CAEhB;;AACA,WAAK,MAAMC,GAAX,IAAkBF,QAAQ,CAACG,IAAT,CAAcC,KAAhC,EAAuC;AACrCH,QAAAA,WAAW,CAACI,IAAZ,CAAiBH,GAAjB;AACD;;AACDR,MAAAA,aAAa,CAACO,WAAD,CAAb;AACD,KATH,EAUGK,KAVH,CAUSC,GAAG,IAAI;AACZX,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCU,GAApC;AACD,KAZH;AAaD,GAfD,EAeG,EAfH,EAnBmB,CAkCX;;AACR;;;;;;;;;;;;;;;;;AAgBAC,EAAAA,cAAc,GAAG,MAAM;AACrB,QAAIrB,YAAY,KAAKE,UAArB,EAAiC;AAC/BN,MAAAA,KAAK,CACFe,GADH,CAEK,wCACCX,YACD,YAAWE,UAAW,EAJ3B,EAMGU,IANH,CAMQC,QAAQ,IAAI;AAChB,cAAMf,MAAM,GACVM,MAAM,GAAGS,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBf,UAApB,CADX;AAEAH,QAAAA,SAAS,CAACD,MAAM,CAACwB,OAAP,CAAe,CAAf,CAAD,CAAT;AACD,OAVH,EAWGH,KAXH,CAWSI,KAAK,IAAI;AACdd,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBa,KAAK,CAACC,OAA1B;AACD,OAbH;AAcD,KAfD,MAeO;AACLzB,MAAAA,SAAS,CAAC,qCAAD,CAAT;AACD;AACF,GAnBD;AAoBA;;;;;;;;;;;;;;;;;;;;;;AAsBD;;AACD,eAAeF,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./converter.css\";\n\n/* class Converter extends React.Component {} */\nfunction Converter() {\n\n  const [result, setResult] = useState(null)\n  const [fromCurrency, setFromCurrency] = useState(\"USD\")\n  const [toCurrency, setToCurrency] = useState(\"GBP\")\n  const [amount, setAmount] = useState(1)\n  const [currencies, setCurrencies] = useState([])\n  /*   \n  constructor(props) {\n    super(props); //need to update this as its depreciated\n    this.state = {\n      result: null,\n      fromCurrency: \"USD\",\n      toCurrency: \"GBP\",\n      amount: 1,\n      currencies: []\n    };\n  } */\n\n  React.useEffect(() => {\n    console.log('Mounted');\n    axios\n      .get(\"https://api.openrates.io/latest\")\n      .then(response => {\n        const currencyArr = [\"EUR\"];\n        //setting up avb currencies to choose from\n        for (const key in response.data.rates) {\n          currencyArr.push(key);\n        }\n        setCurrencies(currencyArr);\n      })\n      .catch(err => {\n        console.log(\"Something went wrong\", err);\n      });\n  }, []); // Empty array means to only run once on mount.\n  /*   \n  componentDidMount() {\n    axios\n      .get(\"https://api.openrates.io/latest\")\n      .then(response => {\n        const currencyArr = [\"EUR\"];\n        //setting up avb currencies to choose from\n        for (const key in response.data.rates) {\n          currencyArr.push(key);\n        }\n        this.setState({currencies: currencyArr});\n      })\n      .catch(err => {\n        console.log(\"Something went wrong\", err);\n      });\n  }; */\n  convertHandler = () => {\n    if (fromCurrency !== toCurrency) {  \n      axios\n        .get(\n          `https://api.openrates.io/latest?base=${\n            fromCurrency\n          }&symbols=${toCurrency}`\n        )\n        .then(response => {\n          const result =\n            amount * response.data.rates[toCurrency];\n          setResult(result.toFixed(5));\n        })\n        .catch(error => {\n          console.log(\"Opps\", error.message);\n        });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n  /*   \n  convertHandler = () => {\n    if (this.state.fromCurrency !== this.state.toCurrency) {  \n      axios\n        .get(\n          `https://api.openrates.io/latest?base=${\n            this.state.fromCurrency\n          }&symbols=${this.state.toCurrency}`\n        )\n        .then(response => {\n          const result =\n            this.state.amount * response.data.rates[this.state.toCurrency];\n          this.setState({ result: result.toFixed(5) });\n        })\n        .catch(error => {\n          console.log(\"Opps\", error.message);\n        });\n    } else {\n      this.setState({ result: \"You cant convert the same currency!\" });\n    }\n  }; */\n\n}\nexport default Converter"]},"metadata":{},"sourceType":"module"}