{"ast":null,"code":"import { useEffect, useReducer } from \"react\";\nimport axios from 'axios'; //const SET_APP_DATA = \"SET_APP_DATA\";\n\nconst SET_CURRENCY_LIST = \"SET_CURRENCY_LIST\";\nconst SET_FROM_CURRENCY = \"SET_FROM_CURRENCY\";\nconst SET_TO_CURRENCY = \"SET_TO_CURRENCY\";\nconst SET_RESULT = \"SET_RESULT\";\nconst SET_HISTORY = \"SET_HISTORY\";\nconst SET_MODE = \"SET_MODE\";\nconst getCurrencies = axios.get(\"https://api.exchangeratesapi.io/latest\");\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_CURRENCY_LIST\":\n      return { ...state,\n        currenciesList: action.currenciesList\n      };\n\n    case \"SET_FROM_CURRENCY\":\n      return { ...state,\n        fromCurrency: action.currency\n      };\n\n    case \"SET_TO_CURRENCY\":\n      return { ...state,\n        toCurrency: action.currency\n      };\n\n    case \"SET_RESULT\":\n      return { ...state,\n        result: action.result\n      };\n\n    case \"SET_HISTORY\":\n      return { ...state,\n        history: action.history\n      };\n\n    case \"SET_MODE\":\n      return { ...state,\n        mode: action.mode\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport default function useAppData() {\n  const [state, dispatch] = useReducer(reducer, {\n    result: null,\n    fromCurrency: \"CAD\",\n    toCurrency: \"USD\",\n    amount: 1,\n    currenciesList: [],\n    history: [],\n    mode: \"latest\"\n  });\n  useEffect(() => {\n    getCurrencies.then(res => {\n      const currenciesList = []; //setting up avb currencies to choose from\n\n      for (const key in res.data.rates) {\n        currenciesList.push(key);\n      }\n\n      console.log(res);\n      dispatch({\n        type: SET_CURRENCY_LIST,\n        currenciesList: currenciesList\n      });\n      convertHandler();\n    }).catch(err => {\n      console.log(\"Something went wrong\", err);\n    });\n  }, []); // Empty array to only run once on mount.\n\n  const setFromCurrency = currency => {\n    dispatch({\n      type: SET_FROM_CURRENCY,\n      currency\n    });\n  };\n\n  const setToCurrency = currency => {\n    dispatch({\n      type: SET_TO_CURRENCY,\n      currency\n    });\n  };\n\n  const setResult = result => {\n    dispatch({\n      type: SET_RESULT,\n      result\n    });\n  };\n\n  const setHistory = history => {\n    dispatch({\n      type: SET_HISTORY,\n      history\n    });\n  };\n\n  const setMode = mode => {\n    dispatch({\n      type: SET_MODE,\n      mode\n    });\n  };\n\n  const selectHandler = e => {\n    /*     switch (e.target.name) {\n          case \"from\":\n            setFromCurrency(e.target.value)\n            return\n            break;\n          case \"to\":\n            setToCurrency(e.target.value)\n            return\n            break;\n          case \"latest\":\n    \n            console.log(\"latest\")\n            setMode(e.target.name)\n            break;\n          case \"history\":\n    \n            console.log(\"history\")\n            setMode(e.target.name)\n            break;\n          default:\n            break;\n        } */\n    if (e.target.name === \"from\") {\n      setFromCurrency(e.target.value);\n      return;\n    } else if (e.target.name === \"to\") {\n      setToCurrency(e.target.value);\n      return;\n    } else if (e.target.name === \"latest\") {\n      console.log(\"latest\");\n      setMode(e.target.name);\n    } else if (e.target.name === \"history\") {\n      console.log(\"history\");\n      setMode(e.target.name);\n    }\n    /*  if (e.target.name === \"from\") {  \n       setFromCurrency(e.target.value) \n     } else if (e.target.name === \"to\") {\n         setToCurrency(e.target.value)\n       } */\n\n\n    setTimeout(convertHandler(), 10000);\n  };\n\n  const convertHandler = () => {\n    const URLConstructor = () => {\n      if (state.mode === \"history\") {\n        console.log(\"history2\");\n        return `\n          https://api.exchangeratesapi.io/history?start_at=2020-09-01&end_at=2020-09-17&base=${state.fromCurrency}&symbols=${state.toCurrency}`;\n      } else if (state.mode === \"latest\") {\n        console.log(\"latest2\");\n        return `\n          https://api.exchangeratesapi.io/latest?symbols=${state.fromCurrency},${state.toCurrency}`;\n      }\n    };\n\n    if (state.fromCurrency !== state.toCurrency) {\n      axios.get(URLConstructor()).then(res => {\n        /*        const result = \n                  state.amount * res.data.rates[state.toCurrency];\n                  setResult(result.toFixed(5)); */\n        if (state.mode === \"latest\") {\n          setResult(state.amount * res.data.rates[state.toCurrency].toFixed(5));\n        } else if (state.mode === \"history\") {\n          let historyController = historyObj => {\n            let history = [];\n\n            for (const [key, value] of Object.entries(historyObj)) {\n              history.push({\n                \"date\": new Date(key),\n                \"value\": value[state.toCurrency]\n              });\n            }\n\n            return history;\n          };\n\n          setHistory(historyController(res.data.rates).sort((a, b) => b.date - a.date));\n        }\n      }).catch(error => {\n        console.log(\"Opps\", error.message);\n      });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n\n  const convertHistoryHandler = e => {\n    const historicalURL = \"https://api.exchangeratesapi.io/history?start_at=2020-09-01&end_at=2020-09-17&\";\n\n    if (state.fromCurrency !== state.toCurrency) {\n      axios.get(`${historicalURL}base=${state.fromCurrency}&symbols=${state.toCurrency}`).then(res => {\n        let historyController = historyObj => {\n          let history = [];\n\n          for (const [key, value] of Object.entries(historyObj)) {\n            history.push({\n              \"date\": new Date(key),\n              \"value\": value[state.toCurrency]\n            });\n          }\n\n          return history;\n        };\n        /* sort the dates from \"res\" = {obj} payload */\n\n\n        setHistory(historyController(res.data.rates).sort((a, b) => b.date - a.date));\n      }).catch(error => {\n        console.log(\"Opps\", error.message);\n      });\n    } else {\n      setResult(\"You can't convert the same currency!\");\n    }\n  };\n\n  return {\n    state,\n    convertHandler,\n    convertHistoryHandler,\n    selectHandler\n  };\n}","map":{"version":3,"sources":["/home/ody7/lighthouse/repos/currency_converters/currency_converter_v1/src/hooks/useAppData.js"],"names":["useEffect","useReducer","axios","SET_CURRENCY_LIST","SET_FROM_CURRENCY","SET_TO_CURRENCY","SET_RESULT","SET_HISTORY","SET_MODE","getCurrencies","get","reducer","state","action","type","currenciesList","fromCurrency","currency","toCurrency","result","history","mode","Error","useAppData","dispatch","amount","then","res","key","data","rates","push","console","log","convertHandler","catch","err","setFromCurrency","setToCurrency","setResult","setHistory","setMode","selectHandler","e","target","name","value","setTimeout","URLConstructor","toFixed","historyController","historyObj","Object","entries","Date","sort","a","b","date","error","message","convertHistoryHandler","historicalURL"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport axios from 'axios';\n\n//const SET_APP_DATA = \"SET_APP_DATA\";\nconst SET_CURRENCY_LIST = \"SET_CURRENCY_LIST\";\nconst SET_FROM_CURRENCY = \"SET_FROM_CURRENCY\";\nconst SET_TO_CURRENCY = \"SET_TO_CURRENCY\";\nconst SET_RESULT = \"SET_RESULT\";\nconst SET_HISTORY = \"SET_HISTORY\";\nconst SET_MODE = \"SET_MODE\";\n\nconst getCurrencies = axios.get(\"https://api.exchangeratesapi.io/latest\")\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case \"SET_CURRENCY_LIST\":\n      return {...state, currenciesList: action.currenciesList}\n    case \"SET_FROM_CURRENCY\":\n      return {...state, fromCurrency: action.currency}\n    case \"SET_TO_CURRENCY\":\n      return {...state, toCurrency: action.currency}\n    case \"SET_RESULT\":\n      return {...state, result: action.result}\n    case \"SET_HISTORY\":\n      return {...state, history: action.history}\n    case \"SET_MODE\":\n      return {...state, mode: action.mode}\n    default:\n      throw new Error();\n  }\n}\nexport default function useAppData() {\n\n  const [state, dispatch] = useReducer(reducer, {\n    result: null,\n    fromCurrency: \"CAD\",\n    toCurrency: \"USD\",\n    amount: 1,\n    currenciesList: [],\n    history: [],\n    mode: \"latest\"\n  })\n\n  useEffect(() => {\n    getCurrencies\n      .then(res => {\n        const currenciesList = [];\n        //setting up avb currencies to choose from\n        for (const key in res.data.rates) {\n          currenciesList.push(key);\n        }\n        console.log(res)\n        dispatch({\n          type: SET_CURRENCY_LIST,\n          currenciesList: currenciesList\n        });\n        convertHandler()\n      })\n      .catch(err => {\n        console.log(\"Something went wrong\", err);\n      });\n  }, []); // Empty array to only run once on mount.\n\n  const setFromCurrency = (currency) => {dispatch({type:SET_FROM_CURRENCY, currency})};\n  const setToCurrency = (currency) => {dispatch({type:SET_TO_CURRENCY, currency})};\n  const setResult = (result) => {dispatch({type:SET_RESULT, result})};\n  const setHistory = (history) => {dispatch({type:SET_HISTORY, history})};\n  const setMode = (mode) => {dispatch({type:SET_MODE, mode})};\n\n  const selectHandler = e => {\n\n/*     switch (e.target.name) {\n      case \"from\":\n        setFromCurrency(e.target.value)\n        return\n        break;\n      case \"to\":\n        setToCurrency(e.target.value)\n        return\n        break;\n      case \"latest\":\n\n        console.log(\"latest\")\n        setMode(e.target.name)\n        break;\n      case \"history\":\n\n        console.log(\"history\")\n        setMode(e.target.name)\n        break;\n      default:\n        break;\n    } */\n    if (e.target.name === \"from\") {\n      setFromCurrency(e.target.value)\n      return \n    } else if (e.target.name === \"to\") {\n      setToCurrency(e.target.value)\n      return\n    } else if (e.target.name === \"latest\") {\n      console.log(\"latest\")\n      setMode(e.target.name)\n    } else if (e.target.name === \"history\") {\n      console.log(\"history\")\n      setMode(e.target.name)\n    }\n    \n   /*  if (e.target.name === \"from\") {  \n      setFromCurrency(e.target.value) \n    } else if (e.target.name === \"to\") {\n        setToCurrency(e.target.value)\n      } */\n      setTimeout(convertHandler(),10000)\n\n  }\n\n  const convertHandler = () => {\n    const URLConstructor = () => {\n      if (state.mode === \"history\") {\n        console.log(\"history2\")\n        return `\n          https://api.exchangeratesapi.io/history?start_at=2020-09-01&end_at=2020-09-17&base=${\n          state.fromCurrency}&symbols=${state.toCurrency}`\n      }\n      else if (state.mode === \"latest\") {\n        console.log(\"latest2\")\n        return `\n          https://api.exchangeratesapi.io/latest?symbols=${\n          state.fromCurrency},${state.toCurrency}`\n      }\n    }\n\n\n\n\n\n\n              \n    if (state.fromCurrency !== state.toCurrency) {  \n      axios\n        .get(URLConstructor())\n        .then(res => {\n/*        const result = \n          state.amount * res.data.rates[state.toCurrency];\n          setResult(result.toFixed(5)); */\n          if (state.mode === \"latest\") {\n            setResult(state.amount * res.data.rates[state.toCurrency].toFixed(5))\n          } else if (state.mode === \"history\") {\n            let historyController = (historyObj) => {\n              let history = []\n              for (const [key, value] of Object.entries(historyObj)) { \n                history.push({\n                  \"date\" : new Date(key), \n                  \"value\" : value[state.toCurrency]\n                })\n              }\n              return history\n            }\n            setHistory(\n              historyController(res.data.rates)\n              .sort((a, b) => b.date - a.date)\n            )\n          }\n        })\n        .catch(error => {\n          console.log(\"Opps\", error.message);\n        });\n    } else {\n      setResult(\"You cant convert the same currency!\");\n    }\n  };\n  \n  const convertHistoryHandler = (e) => {\n    const historicalURL = \"https://api.exchangeratesapi.io/history?start_at=2020-09-01&end_at=2020-09-17&\";\n\n    if (state.fromCurrency !== state.toCurrency) {  \n      axios\n        .get(`${\n          historicalURL}base=${\n          state.fromCurrency}&symbols=${\n          state.toCurrency}`\n        )\n        .then(res => {\n          let historyController = (historyObj) => {\n            let history = []\n            for (const [key, value] of Object.entries(historyObj)) { \n              history.push({\n                \"date\" : new Date(key), \n                \"value\" : value[state.toCurrency]\n              })}\n            return history\n          }\n          /* sort the dates from \"res\" = {obj} payload */\n          setHistory(\n            historyController(res.data.rates)\n            .sort((a, b) => b.date - a.date)\n          )\n        })\n        .catch(error => {\n          console.log(\"Opps\", error.message);\n        });\n    } else {\n      setResult(\"You can't convert the same currency!\");\n    }\n  };\n\n  return {\n    state,\n    convertHandler,\n    convertHistoryHandler,\n    selectHandler\n  }\n}"]},"metadata":{},"sourceType":"module"}